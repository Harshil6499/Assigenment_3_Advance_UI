1) Explain the structure and purpose of forms in Flutter.

In Flutter, forms are essential for collecting structured data from users, such as during account creation, login, or surveys, and they serve as a primary tool for user interaction within applications

A form in Flutter is a specialized widget used for collecting, organizing, and validating user input.
It provides a structured way to handle multiple input fields together, such as text boxes, dropdowns, and checkboxes.


Definition
A Form is a container widget that groups input fields (TextFormField, DropdownButtonFormField, etc.) into a single unit.



2) Describe how controllers and listeners are used to manage form input.

In React, form input management is primarily handled through controlled components, which use state and event listeners to manage data. Controlled components rely on React state to manage form data, making React the "single source of truth" for the form input values.


 This is achieved by setting the value attribute of form elements like <input>, <textarea>, or <select> to a state variable and using an onChange event handler to update that state whenever    the user interacts with the input.


 For example, a handleChange function updates the state in response to user typing, ensuring the form data is always synchronized with the component's state.


Example of a Controller

final TextEditingController _nameController = TextEditingController();

TextFormField(
  controller: _nameController,
  decoration: const InputDecoration(labelText: "Name"),
);


Example of a Listener

@override
void initState() {
  super.initState();
  _nameController.addListener(() {
    print("Current value: ${_nameController.text}");
  });
}



3) List some common form validation techniques and provide examples.

1. Required Field Validation
TextFormField(
  decoration: const InputDecoration(labelText: "Name"),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return "Name is required";
    }
    return null;
  },
)


2. Email Format Validation
TextFormField(
  decoration: const InputDecoration(labelText: "Email"),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return "Email is required";
    } else if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
      return "Enter a valid email";
    }
    return null;
  },
)


3. Password Strength Validation
TextFormField(
  obscureText: true,
  decoration: const InputDecoration(labelText: "Password"),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return "Password is required";
    } else if (value.length < 8) {
      return "Password must be at least 8 characters";
    } else if (!RegExp(r'[A-Z]').hasMatch(value)) {
      return "Include at least one uppercase letter";
    } else if (!RegExp(r'[0-9]').hasMatch(value)) {
      return "Include at least one number";
    }
    return null;
  },
)



